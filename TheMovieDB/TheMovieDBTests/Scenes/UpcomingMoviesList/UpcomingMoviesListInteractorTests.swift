//
//  UpcomingMoviesListInteractorTests.swift
//  TheMovieDB
//
//  Created by Tiago Chaves on 06/10/2018.
//  Copyright (c) 2018 TiagoChaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheMovieDB
import XCTest

class UpcomingMoviesListInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: UpcomingMoviesListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupUpcomingMoviesListInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUpcomingMoviesListInteractor()
    {
        sut = UpcomingMoviesListInteractor()
    }
    
    // MARK: Test doubles
    
    class UpcomingMoviesListPresentationLogicSpy: UpcomingMoviesListPresentationLogic
    {
        var presentUpcomingMoviesCalled = false
        var presentFilteredUpcomingMoviesCalled = false
        var presentUpcomingMovieDetailCalled = false
        
        var filteredMoviesCount = 0
        
        func presentUpcomingMovies(response: UpcomingMoviesList.MoviesList.Response) {
            presentUpcomingMoviesCalled = true
        }
        
        func presentFilteredUpcomingMovies(response: UpcomingMoviesList.FilteredMovies.Response) {
            presentFilteredUpcomingMoviesCalled = true
            filteredMoviesCount = response.filteredUpcomingMovies.count
        }
        
        func presentUpcomingMovieDetail(response: UpcomingMoviesList.MovieDetail.Response) {
            presentUpcomingMovieDetailCalled = true
        }
    }
    
    class UpcomingMoviesListWorkerSpy: UpcomingMoviesListWorker {
        
        var workerCalled = false
        override func getUpcomingMovies(ofPage page: Int, completionHandler: @escaping (UpcomingMovieResult?, Error?) -> Void) {
            workerCalled = true
            completionHandler(nil,nil)
        }
    }
    
    class GenresWorkerSpy: GenresWorker {
        
        var workerCalled = false
        override func getGenresList(completionHandler: @escaping ([GenreData]?, Error?) -> Void) {
            workerCalled = true
            completionHandler(nil,nil)
        }
    }
    
    // MARK: Tests
    func testMovieListInteractorShouldAskWorkerToGetUpcomingMoviesListAndPresenterToFormatResult()
    {
        // Given
        let presenterSpy = UpcomingMoviesListPresentationLogicSpy()
        sut.presenter = presenterSpy
        let workerSpy = UpcomingMoviesListWorkerSpy(UpcomingMoviesNetworkWorker())
        sut.worker = workerSpy
        let request = UpcomingMoviesList.MoviesList.Request(page: 1)
        
        // When
        sut.getUpcomingMovies(request: request)
        
        // Then
        XCTAssertTrue(workerSpy.workerCalled, "getUpcomingMovies() should ask UpcomingMoviesListWorker to get the movies list")
        XCTAssertTrue(presenterSpy.presentUpcomingMoviesCalled, "getUpcomingMovies(request:) should ask the presenter to format the result")
    }
    
    func testMovieListInteractorShouldFilterTheMovieListAndAskPresenterToPresent(){
        
        // Given
        let presenterSpy = UpcomingMoviesListPresentationLogicSpy()
        sut.presenter = presenterSpy
        let request = UpcomingMoviesList.FilteredMovies.Request(text: "The", upcomingMovies: Seeds.DisplayUpcomingMovieList.movieList)
        let expectedCountOfFilteredMovies = 3
        // When
        sut.getFilteredUpcomingMoview(request: request)
        
        // Then
        XCTAssertEqual(presenterSpy.filteredMoviesCount, expectedCountOfFilteredMovies, "getFilteredUpcomingMoview(request:) should return 3 movies")
        XCTAssertTrue(presenterSpy.presentFilteredUpcomingMoviesCalled, "getFilteredUpcomingMoview(request:) should ask the presenter to present the result")
    }
    
    func testMovieListInteractorShouldSaveAMovieInDataStoreAndCallPresenter(){
        
        // Given
        let presenterSpy = UpcomingMoviesListPresentationLogicSpy()
        sut.presenter = presenterSpy
        let request = UpcomingMoviesList.MovieDetail.Request(upcomingMovie:Seeds.DisplayUpcomingMovieList.movie1)
        let expectedSavedMovie = Seeds.DisplayUpcomingMovieList.movie1
        // When
        sut.saveUpcomingMovie(request: request)
        
        // Then
        XCTAssertEqual(sut.upcomingMovie!, expectedSavedMovie, "saveUpcomingMovie(request:) should save \(expectedSavedMovie.title)")
        XCTAssertTrue(presenterSpy.presentUpcomingMovieDetailCalled, "saveUpcomingMovie(request:) should ask the presenter")
    }
    
    func testMovieListInteractorShouldAskWorkerToGetGenres()
    {
        // Given
        let workerSpy = GenresWorkerSpy(GenresNetworkWorker(),nil)
        sut.genreWorker = workerSpy
        let request = UpcomingMoviesList.GenresList.Request()
        
        // When
        sut.getGenres(request: request)
        
        // Then
        XCTAssertTrue(workerSpy.workerCalled, "getGenres() should ask GenresWorker to get the genres list")
    }
}
