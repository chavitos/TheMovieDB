//
//  UpcomingMoviesListPresenterTests.swift
//  TheMovieDB
//
//  Created by Tiago Chaves on 06/10/2018.
//  Copyright (c) 2018 TiagoChaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheMovieDB
import XCTest

//protocol UpcomingMoviesListPresentationLogic
//{
//    func presentUpcomingMovies(response: UpcomingMoviesList.MoviesList.Response)
//    func presentFilteredUpcomingMovies(response: UpcomingMoviesList.FilteredMovies.Response)
//    func presentUpcomingMovieDetail(response: UpcomingMoviesList.MovieDetail.Response)
//}

class UpcomingMoviesListPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: UpcomingMoviesListPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupUpcomingMoviesListPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUpcomingMoviesListPresenter()
    {
        sut = UpcomingMoviesListPresenter()
    }
    
    // MARK: Test doubles
    
    class UpcomingMoviesListDisplayLogicSpy: UpcomingMoviesListDisplayLogic
    {
        var displayUpcomingMoviesCalled = false
        var displayFilteredUpcomingMoviesCalled = false
        var displayUpcomingMovieDetailCalled = false
        
        var displayUpcomingMoviesViewModel:UpcomingMoviesList.MoviesList.ViewModel!
        var displayFilteredUpcomingMoviesViewModel:UpcomingMoviesList.FilteredMovies.ViewModel!
        
        func displayUpcomingMovies(viewModel: UpcomingMoviesList.MoviesList.ViewModel) {
            displayUpcomingMoviesCalled = true
            displayUpcomingMoviesViewModel = viewModel
        }
        
        func displayFilteredUpcomingMovies(viewModel: UpcomingMoviesList.FilteredMovies.ViewModel) {
            displayFilteredUpcomingMoviesCalled = true
            displayFilteredUpcomingMoviesViewModel = viewModel
        }
        
        func displayUpcomingMovieDetail(viewModel: UpcomingMoviesList.MovieDetail.ViewModel) {
            displayUpcomingMovieDetailCalled = true
        }
    }
    
    // MARK: Tests
    
    func testPresentUpcomingMoviesShouldConvertResponseInDisplayUpcomingResultAndAskForViewControllerToShow()
    {
        // Given
        let spy = UpcomingMoviesListDisplayLogicSpy()
        sut.viewController = spy
        let response = UpcomingMoviesList.MoviesList.Response(upcomingMoviesResult: Seeds.UpcomingMoviesAPIList.result, error: nil)
        
        // When
        sut.presentUpcomingMovies(response: response)
        
        // Then
        XCTAssertTrue(spy.displayUpcomingMoviesCalled, "presentUpcomingMovies(response:) should ask the view controller to display the result")
        XCTAssertEqual(spy.displayUpcomingMoviesViewModel.upcomingMovies, Seeds.DisplayUpcomingMovieList.result)
    }
    
    func testPresentFilteredUpcomingMoviesShouldAskForViewControllerToShow()
    {
        // Given
        let spy = UpcomingMoviesListDisplayLogicSpy()
        sut.viewController = spy
        let response = UpcomingMoviesList.FilteredMovies.Response(filteredUpcomingMovies: [Seeds.DisplayUpcomingMovieList.movie1])
        
        // When
        sut.presentFilteredUpcomingMovies(response: response)
        
        // Then
        XCTAssertTrue(spy.displayFilteredUpcomingMoviesCalled, "presentFilteredUpcomingMovies(response:) should ask the view controller to display the filtered movies")
        XCTAssertEqual(spy.displayFilteredUpcomingMoviesViewModel.filteredUpcomingMovies, [Seeds.DisplayUpcomingMovieList.movie1])
    }
    
    func testPresentUpcomingMovieDetailShouldAskViewController(){
        
        // Given
        let spy = UpcomingMoviesListDisplayLogicSpy()
        sut.viewController = spy
        let response = UpcomingMoviesList.MovieDetail.Response()
        
        // When
        sut.presentUpcomingMovieDetail(response: response)
        
        // Then
        XCTAssertTrue(spy.displayUpcomingMovieDetailCalled, "presentUpcomingMovieDetail(response:) should ask the view controller to route to detail")
    }
}
