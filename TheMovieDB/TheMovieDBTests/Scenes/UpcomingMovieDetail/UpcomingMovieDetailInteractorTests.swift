//
//  UpcomingMovieDetailInteractorTests.swift
//  TheMovieDB
//
//  Created by Tiago Chaves on 07/10/2018.
//  Copyright (c) 2018 TiagoChaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheMovieDB
import XCTest

class UpcomingMovieDetailInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: UpcomingMovieDetailInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupUpcomingMovieDetailInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUpcomingMovieDetailInteractor()
    {
        sut = UpcomingMovieDetailInteractor()
    }
    
    // MARK: Test doubles
    
    class UpcomingMovieDetailPresentationLogicSpy: UpcomingMovieDetailPresentationLogic{
        
        var presentMovieDetailCalled = false
        var presentMovieDetailResponse:UpcomingMovieDetail.MovieDetail.Response!
        
        func presentMovieDetail(response: UpcomingMovieDetail.MovieDetail.Response) {
            presentMovieDetailCalled = true
            presentMovieDetailResponse = response
        }
    }
    
    // MARK: Tests
    
    func testUpcomingMovieDetailInteractorShouldAskPresenterToPresentTheMovieDetail()
    {
        // Given
        let spy = UpcomingMovieDetailPresentationLogicSpy()
        sut.presenter = spy
        let request = UpcomingMovieDetail.MovieDetail.Request(overviewFont: UIFont(), overviewWidth: 10.0)
        sut.upcomingMovie = Seeds.DisplayUpcomingMovieList.movie1
        
        // When
        sut.getMovieDetail(request: request)
        
        // Then
        XCTAssertTrue(spy.presentMovieDetailCalled, "getMovieDetail(request:) should ask the presenter to present the movie detail")
        XCTAssertEqual(spy.presentMovieDetailResponse.upcomingMoviesDetail, sut.upcomingMovie!)
    }
}
