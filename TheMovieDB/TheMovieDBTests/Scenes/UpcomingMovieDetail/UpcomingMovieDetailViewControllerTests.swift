//
//  UpcomingMovieDetailViewControllerTests.swift
//  TheMovieDB
//
//  Created by Tiago Chaves on 07/10/2018.
//  Copyright (c) 2018 TiagoChaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheMovieDB
import XCTest

class UpcomingMovieDetailViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: UpcomingMovieDetailViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupUpcomingMovieDetailViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUpcomingMovieDetailViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "UpcomingMovieDetailViewController") as? UpcomingMovieDetailViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class UpcomingMovieDetailBusinessLogicSpy: UpcomingMovieDetailBusinessLogic, UpcomingMovieDetailDataStore{
        
        var upcomingMovie: DisplayUpcomingMovie? = Seeds.DisplayUpcomingMovieList.movie1
        
        var getMovieDetailCalled = false
        
        func getMovieDetail(request: UpcomingMovieDetail.MovieDetail.Request) {
            getMovieDetailCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoSomethingWhenViewIsLoaded()
    {
        // Given
        let spy = UpcomingMovieDetailBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.getMovieDetailCalled, "viewDidLoad() should ask the interactor to getMovieDetail")
    }
    
    func testDisplaySomething()
    {
        // Given
        let movieDetail = Seeds.DisplayUpcomingMovieList.movie1
        let viewModel = UpcomingMovieDetail.MovieDetail.ViewModel(upcomingMoviesDetail: movieDetail, overviewHeightConstraint: 10.0)
        let spy = UpcomingMovieDetailBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.displayMovieDetail(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.movieTitleLabel.text, movieDetail.title, "displayMovieDetail(viewModel:) should update movieTitleLabel with \(movieDetail.title)")
        XCTAssertEqual(sut.movieOverviewLabel.text, movieDetail.overview, "displayMovieDetail(viewModel:) should update movieOverviewLabel with \(movieDetail.overview)")
        XCTAssertEqual(sut.overviewConstraint.constant, viewModel.overviewHeightConstraint, "displayMovieDetail(viewModel:) should update overviewHeightConstraint with \(viewModel.overviewHeightConstraint)")
        XCTAssertEqual(sut.releaseDateLabel.text, movieDetail.releaseDate, "displayMovieDetail(viewModel:) should update releaseDateLabel with \(movieDetail.releaseDate)")
        XCTAssertEqual(sut.genreList.count, movieDetail.genre.count, "displayMovieDetail(viewModel:) should update genres with \(movieDetail.genre.count) genres")
    }
}
