//
//  GenresWorker.swift
//  TheMovieDB
//
//  Created by Tiago Chaves on 04/10/18.
//  Copyright (c) 2018 TiagoChaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

class GenresWorker
{
    var worker:GenresListWorkerProtocol?
    var coredataWorker:GenresCoreDataListWorkerProtocol?
    
    init(_ worker:GenresListWorkerProtocol?, _ coredataWorker:GenresCoreDataListWorkerProtocol?){
        self.worker = worker
        self.coredataWorker = coredataWorker
    }
    
    func getGenresList(completionHandler:@escaping ([GenreData]?,Error?) -> Void) {
        
        let context:NSManagedObjectContext = CoreDataManager.sharedInstance.persistentContainer.viewContext
        let fetch = Genre.genreFetchRequest()
        var result:[Genre] = []
        
        do{
            result = try context.fetch(fetch)
        }catch let error{
            NSLog("Error trying to access coredata Genre: \(error)")
            return
        }
        
        if result.count <= 0 {
            NSLog("Genres are not saved in coredata...Requesting in network...")
            worker?.getGenresList(completionHandler: { (genreList: () throws -> [GenreData])->Void in
                
                do {
                    let genreList = try genreList()
                    NSLog("Genres downloaded!")
                    completionHandler(genreList,nil)
                }catch let error{
                    NSLog("Error trying to get genres in network \(error.localizedDescription)")
                    completionHandler(nil,error)
                }
            })
        }
    }
    
    func getGenresList(withIds ids:[Int], completionHandler:@escaping ([GenreData]?,Error?) -> Void) {
    
        coredataWorker?.getGenresList(withIds: ids, completionHandler: { (genreList: () throws -> [GenreData])->Void in
            
            do{
                let genreList = try genreList()
                NSLog("Genres with ids \(ids) fetched")
                completionHandler(genreList,nil)
            }catch let error{
                NSLog("Error trying to fetch genres with ids \(ids)")
                completionHandler(nil,error)
            }
        })
    }
}

protocol GenresListWorkerProtocol {
    func getGenresList(completionHandler:@escaping (() throws -> [GenreData]) -> Void)
}

protocol GenresCoreDataListWorkerProtocol {
    func getGenresList(withIds ids:[Int], completionHandler:@escaping (() throws -> [GenreData]) -> Void)
}
