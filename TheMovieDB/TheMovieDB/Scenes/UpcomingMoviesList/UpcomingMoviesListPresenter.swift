//
//  UpcomingMoviesListPresenter.swift
//  TheMovieDB
//
//  Created by Tiago Chaves on 03/10/18.
//  Copyright (c) 2018 TiagoChaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UpcomingMoviesListPresentationLogic
{
    func presentUpcomingMovies(response: UpcomingMoviesList.MoviesList.Response)
    func presentFilteredUpcomingMovies(response: UpcomingMoviesList.FilteredMovies.Response)
    func presentUpcomingMovieDetail(response: UpcomingMoviesList.MovieDetail.Response)
}

class UpcomingMoviesListPresenter: UpcomingMoviesListPresentationLogic
{
    weak var viewController: UpcomingMoviesListDisplayLogic?
    
    // MARK: - UpcomingMoviesListPresentationLogic
    
    func presentUpcomingMovies(response: UpcomingMoviesList.MoviesList.Response){
        
        let viewModel:UpcomingMoviesList.MoviesList.ViewModel
        
        if let error = response.error {
            viewModel = UpcomingMoviesList.MoviesList.ViewModel(upcomingMovies: nil, error: error)
        }else{
            if let upcomingMoviesResult = response.upcomingMoviesResult {
                let displayUpcomingMoviesResult = getDisplayUpcomingMoviesResult(upcomingMoviesResult)
                viewModel = UpcomingMoviesList.MoviesList.ViewModel(upcomingMovies: displayUpcomingMoviesResult, error: nil)
            }else{
                viewModel = UpcomingMoviesList.MoviesList.ViewModel(upcomingMovies: nil, error: nil)
            }
        }
        
        viewController?.displayUpcomingMovies(viewModel: viewModel)
    }
    
    func presentFilteredUpcomingMovies(response: UpcomingMoviesList.FilteredMovies.Response) {
        
        let viewModel:UpcomingMoviesList.FilteredMovies.ViewModel
        viewModel = UpcomingMoviesList.FilteredMovies.ViewModel(filteredUpcomingMovies:response.filteredUpcomingMovies)
        
        viewController?.displayFilteredUpcomingMovies(viewModel: viewModel)
    }
    
    func presentUpcomingMovieDetail(response: UpcomingMoviesList.MovieDetail.Response) {
        let viewModel = UpcomingMoviesList.MovieDetail.ViewModel()
        viewController?.displayUpcomingMovieDetail(viewModel: viewModel)
    }
    
    //MARK: - Private Methods
    
    private func getDisplayUpcomingMoviesResult(_ upcomingResult:UpcomingMovieResult) -> DisplayUpcomingMoviesResult {
        
        let upcomingMovies = upcomingResult.results
        let nextPage = upcomingResult.page < upcomingResult.totalPages ? upcomingResult.page + 1 : -1
        var displayUpcomingMovies:[DisplayUpcomingMovie] = []
        
        let dateFormatterToDate   = DateFormatter().getDateFormatter(withFormat: "yyyy-MM-dd")
        let dateFormatterToString = DateFormatter().getDateFormatter(withFormat: "MMMM dd, yyyy")
        
        DispatchQueue.global(qos: .utility).sync {
            
            for upcomingMovie in upcomingMovies {
                
                let ids = upcomingMovie.genre
                var genresNames:[String] = []
                if let genres = Genre.getGenreData(withIds: ids).0 {
                    
                    genresNames = genres.map{ return $0.name }
                }
                
                let releaseDate = dateFormatterToDate.date(from: upcomingMovie.releaseDate)
                let formatedReleaseDate = dateFormatterToString.string(from: releaseDate ?? Date())
                
                let displayUpcomingMovie = DisplayUpcomingMovie(posterPath: upcomingMovie.posterPath ?? "",
                                                                backdropPath: upcomingMovie.backdropPath ?? "",
                                                                overview: upcomingMovie.overview,
                                                                releaseDate: formatedReleaseDate,
                                                                genre: genresNames,
                                                                title: upcomingMovie.title)
                
                displayUpcomingMovies.append(displayUpcomingMovie)
            }
        }
        
        return DisplayUpcomingMoviesResult(nextPage:nextPage, upcomingMovies:displayUpcomingMovies)
    }
}
