//
//  UpcomingMoviesListViewController.swift
//  TheMovieDB
//
//  Created by Tiago Chaves on 03/10/18.
//  Copyright (c) 2018 TiagoChaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UpcomingMoviesListDisplayLogic: class
{
    func displayUpcomingMovies(viewModel: UpcomingMoviesList.MoviesList.ViewModel)
    func displayFilteredUpcomingMovies(viewModel: UpcomingMoviesList.FilteredMovies.ViewModel)
    func displayUpcomingMovieDetail(viewModel: UpcomingMoviesList.MovieDetail.ViewModel)
}

class UpcomingMoviesListViewController: UIViewController, UpcomingMoviesListDisplayLogic
{
    var interactor: UpcomingMoviesListBusinessLogic?
    var router: (NSObjectProtocol & UpcomingMoviesListRoutingLogic & UpcomingMoviesListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = UpcomingMoviesListInteractor()
        let presenter = UpcomingMoviesListPresenter()
        let router = UpcomingMoviesListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getGenres()
        getUpcomingMovies(forPage:nextPage)
    }
    
    //MARK: - IBOutlets
    @IBOutlet weak var upcomingMoviesTable: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    
    //MARK: - Variables
    var nextPage:Int = 1
    var upcomingMoviesList:[DisplayUpcomingMovie] = []
    var filteredUpcomingMoviesList:[DisplayUpcomingMovie] = []
    var filtering = false
    
    let upcomingCellIdentifier = "movieCell"
    
    //MARK: - Private Methods
    
    private func getUpcomingMovies(forPage page:Int)
    {
        let request = UpcomingMoviesList.MoviesList.Request(page:page)
        interactor?.getUpcomingMovies(request:request)
    }
    
    private func getFilteredUpcomingMovies(withName name:String) {
        
        let request = UpcomingMoviesList.FilteredMovies.Request(text:name, upcomingMovies: upcomingMoviesList)
        interactor?.getFilteredUpcomingMoview(request: request)
    }
    
    private func getGenres() {
        
        let request = UpcomingMoviesList.GenresList.Request()
        interactor?.getGenres(request:request)
    }
    
    //MARK: - UpcomingMoviesListDisplayLogic Methods
    
    func displayUpcomingMovies(viewModel: UpcomingMoviesList.MoviesList.ViewModel) {
        
        if viewModel.error == nil, let upcomingMovies = viewModel.upcomingMovies {
            
            nextPage = upcomingMovies.nextPage
            upcomingMoviesList += upcomingMovies.upcomingMovies
            
            DispatchQueue.main.async {
                self.upcomingMoviesTable.reloadData()
            }
        }
    }
    
    func displayFilteredUpcomingMovies(viewModel: UpcomingMoviesList.FilteredMovies.ViewModel) {
        
        filteredUpcomingMoviesList = viewModel.filteredUpcomingMovies
        filtering = true
        upcomingMoviesTable.reloadData()
    }
    
    func displayUpcomingMovieDetail(viewModel: UpcomingMoviesList.MovieDetail.ViewModel) {
        
        self.performSegue(withIdentifier: "UpcomingMovieDetail", sender: nil)
    }
}

extension UpcomingMoviesListViewController:UITableViewDataSource,UITableViewDelegate{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return filtering ? filteredUpcomingMoviesList.count : upcomingMoviesList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let upcomingMovie = filtering ? filteredUpcomingMoviesList[indexPath.row] : upcomingMoviesList[indexPath.row]
        
        let cell = tableView.dequeueReusableCell(withIdentifier: upcomingCellIdentifier, for: indexPath) as! UpcomingMovieTableViewCell
        cell.configCell(withUpcomingMovie: upcomingMovie)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath)
        cell?.isSelected = false
        
        let upcomingMovie = upcomingMoviesList[indexPath.row]
        let request = UpcomingMoviesList.MovieDetail.Request(upcomingMovie:upcomingMovie)
        interactor?.saveUpcomingMovie(request: request)
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        
        if !filtering {
            
            if indexPath.row == upcomingMoviesList.count - 1 {
                
                if nextPage > 0 {
                    getUpcomingMovies(forPage:nextPage)
                }
            }
        }
    }
}

extension UpcomingMoviesListViewController:UISearchBarDelegate{
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        
        if !searchText.isEmpty {
            getFilteredUpcomingMovies(withName: searchText)
        }else{
            filtering = false
            upcomingMoviesTable.reloadData()
        }
    }
}
